# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    twig.extension.date:
        class: Twig_Extensions_Extension_Date
        tags:
            - { name: twig.extension }

    app.post_uploader:
        class: AppBundle\Utils\FileUploader
        arguments: ['%posts_directory%']

    app.confirm_mail:
        class: AppBundle\Service\ConfirmationMail
        arguments: ['@Swift_Mailer', '@twig']

    post.archive:
        class: PostBundle\Service\PostArchive
        arguments: ['@doctrine.orm.entity_manager']
        public: true

    payment.stripe:
        class: StripeBundle\Service\StripePayment
        arguments: ['%payment.stripe.secretkey%', '%payment.stripe.publishablekey%']

    post.doctrine_post_listener:
        class: PostBundle\EventListener\PostUploadListener
        arguments: ['@app.post_uploader', '@security.token_storage']
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }
    app.user_uploader:
        class: AppBundle\Utils\FileUploader
        arguments: ['%users_directory%']

    user.doctrine_user_listener:
        class: UserBundle\EventListener\UserUploadListener
        arguments: ['@app.user_uploader', '@security.token_storage']
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }

    app.form.profile:
        class: UserBundle\Form\ProfileFormType
        tags:
            - { name: form.type, alias: app_user_profile }

    fos_user.profile.controller:
        class: UserBundle\Controller\ProfileController
        arguments: ['@event_dispatcher', '@fos_user.profile.form.factory', '@fos_user.user_manager']

    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'
    PostBundle\DataFixtures\:
        resource: '../../src/PostBundle/DataFixtures'
        tags: ['doctrine.fixtures.orm']