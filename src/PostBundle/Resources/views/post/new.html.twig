{% extends 'base.html.twig' %}

{% block sidebar %}
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('bootstrap-tagsinput/dist/bootstrap-tagsinput.css') }}">
{% endblock %}

{% block body %}
    <div class="row justify-content-center my-5">
        <div class="col-auto">
            <h1>Post creation</h1>
        </div>

        <div class="col-10 row justify-content-center">
            {{ form_start(form, {'attr': {'class': 'col-12'}}) }}
            <div class="form-group">
                {{ form_label(form.title) }}
                {{ form_widget(form.title, {'attr': {'class': 'form-control'}}) }}
            </div>
            <div class="form-group">
                {{ form_label(form.category) }}
                {{ form_widget(form.category, {'attr': {'class': 'form-control'}}) }}
            </div>
            <div class="form-group">
                {{ form_label(form.image) }}
                {{ form_widget(form.image, {'attr': {'class': 'form-control'}}) }}
            </div>
            <div class="form-group">
                {{ form_label(form.blockquote) }}
                {{ form_widget(form.blockquote, {'attr': {'class': 'form-control', 'required': 'false'}, 'id': 'blockquote'}) }}
            </div>
            <div class="form-group">
                {{ form_label(form.content) }}
                {{ form_widget(form.content, {'attr': {'class': 'form-control', 'required': 'false'}, 'id': 'content'}) }}
            </div>
            <div class="form-group d-none">
                {{ form_label(form.tags) }}
                {{ form_widget(form.tags, {'attr': {'class': 'form-control'}}) }}
            </div>
            <div class="form-group text-dark">
                <select name="tags[]" id="myTags" class="form-control" multiple>

                </select>
            </div>

            <button type="submit" formnovalidate class="btn btn-primary">Create</button>
            {{ form_end(form) }}
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('js/tinymce/js/tinymce/tinymce.min.js') }}"></script>

    <script src="{{ asset('js/tinymce/js/tinymce/jquery.tinymce.min.js') }}"></script>
    <script>tinymce.init({
            selector:'#blockquote'
    });</script>
    <script>tinymce.init({
            selector:'#content',
            height: 500,
            plugins: [
                "advlist autolink lists link image imagetools charmap print preview anchor paste",
                "searchreplace visualblocks code fullscreen",
                "insertdatetime media table contextmenu wordcount"
            ],
            toolbar: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image",
            imagetools_toolbar: "rotateleft rotateright | flipv fliph | editimage imageoptions",
            image_title: true,
            // enable automatic uploads of images represented by blob or data URIs
            automatic_uploads: true,
            paste_data_images: true,
            // URL of our upload handler (for more details check: https://www.tinymce.com/docs/configure/file-image-upload/#images_upload_url)
            images_upload_url: '{{ app.request.getBaseUrl() }}' + '/upload-image-tiny',
            // here we add custom filepicker only to Image dialog
            relative_urls: false,
            remove_script_host: false,
            // and here's our custom image picker
            file_picker_callback: function(cb, value, meta) {
                var input = document.createElement('input');
                input.setAttribute('type', 'file');
                input.setAttribute('accept', 'image/*');

                // Note: In modern browsers input[type="file"] is functional without
                // even adding it to the DOM, but that might not be the case in some older
                // or quirky browsers like IE, so you might want to add it to the DOM
                // just in case, and visually hide it. And do not forget do remove it
                // once you do not need it anymore.

                input.onchange = function() {
                    var file = this.files[0];

                    var reader = new FileReader();
                    reader.onload = function () {
                        // Note: Now we need to register the blob in TinyMCEs image blob
                        // registry. In the next release this part hopefully won't be
                        // necessary, as we are looking to handle it internally.
                        var id = 'blobid' + (new Date()).getTime();
                        var blobCache =  tinymce.activeEditor.editorUpload.blobCache;
                        var base64 = reader.result.split(',')[1];
                        var blobInfo = blobCache.create(id, file, base64);
                        blobCache.add(blobInfo);

                        // call the callback and populate the Title field with the file name
                        cb(blobInfo.blobUri(), { title: file.name });
                    };
                    reader.readAsDataURL(file);
                };

                input.click();
            }
    });</script>

    <script src="{{ asset('bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js') }}"></script>
    <script>
        $('select#myTags').tagsinput({
            confirmKeys: [32],
        });
    </script>


{% endblock %}
