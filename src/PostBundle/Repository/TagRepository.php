<?php

namespace PostBundle\Repository;

use Doctrine\ORM\AbstractQuery;
use PostBundle\Entity\Tag;

/**
 * TagRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TagRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param array $criteria
     *
     * @return null|object|Tag
     */
    public function findTagOrCreate($criteria)
    {
        $entity = $this->findOneBy($criteria);

        if (null === $entity) {
            $entity = new Tag();
            $entity->setName($criteria['name']);
        }

        return $entity;
    }

    /**
     * @return mixed
     *
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findBigTag()
    {
        $qb = $this->createQueryBuilder('t')
            ->innerJoin('t.posts', 'p')
            ->groupBy('t')
            ->select('count(p) as counts')
            ->orderBy('counts', 'DESC')
            ->setMaxResults(1);

        $query = $qb->getQuery();

        return $query->getOneOrNullResult();
    }

    /**
     * @param string $query
     *
     * @return mixed
     */
    public function findApiTags($query)
    {
        $qb = $this->createQueryBuilder('t')
            ->where('t.name like :name')
            ->setParameter('name', $query.'%')
            ->setMaxResults(8);

        $query = $qb->getQuery();

        return $query->getResult(AbstractQuery::HYDRATE_ARRAY);
    }

    /**
     * @return mixed
     */
    public function findAllApi()
    {
        $qb = $this->createQueryBuilder('t')
            ->select('t.name');

        $query = $qb->getQuery();

        return $query->getResult(AbstractQuery::HYDRATE_ARRAY);
    }
}
